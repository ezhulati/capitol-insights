# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  hasReferences: Boolean
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  post(relativePath: String): Post!
  postConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PostFilter): PostConnection!
  page(relativePath: String): Page!
  pageConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PageFilter): PageConnection!
  homePage(relativePath: String): HomePage!
  homePageConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: HomePageFilter): HomePageConnection!
  resultsPage(relativePath: String): ResultsPage!
  resultsPageConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ResultsPageFilter): ResultsPageConnection!
  servicesPage(relativePath: String): ServicesPage!
  servicesPageConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ServicesPageFilter): ServicesPageConnection!
  teamPage(relativePath: String): TeamPage!
  teamPageConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: TeamPageFilter): TeamPageConnection!
  contactPage(relativePath: String): ContactPage!
  contactPageConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ContactPageFilter): ContactPageConnection!
  approachPage(relativePath: String): ApproachPage!
  approachPageConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ApproachPageFilter): ApproachPageConnection!
  updatesPage(relativePath: String): UpdatesPage!
  updatesPageConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: UpdatesPageFilter): UpdatesPageConnection!
}

input DocumentFilter {
  post: PostFilter
  page: PageFilter
  homePage: HomePageFilter
  resultsPage: ResultsPageFilter
  servicesPage: ServicesPageFilter
  teamPage: TeamPageFilter
  contactPage: ContactPageFilter
  approachPage: ApproachPageFilter
  updatesPage: UpdatesPageFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Post | Page | HomePage | ResultsPage | ServicesPage | TeamPage | ContactPage | ApproachPage | UpdatesPage | Folder

type Post implements Node & Document {
  title: String!
  excerpt: String!
  date: String!
  author: String!
  authorTitle: String!
  readTime: String!
  category: String!
  tags: [String!]!
  featured: Boolean!
  image: String!
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input PostFilter {
  title: StringFilter
  excerpt: StringFilter
  date: DatetimeFilter
  author: StringFilter
  authorTitle: StringFilter
  readTime: StringFilter
  category: StringFilter
  tags: StringFilter
  featured: BooleanFilter
  image: ImageFilter
  body: RichTextFilter
}

type PostConnectionEdges {
  cursor: String!
  node: Post
}

type PostConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PostConnectionEdges]
}

type Page implements Node & Document {
  title: String!
  description: String!
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input PageFilter {
  title: StringFilter
  description: StringFilter
  body: RichTextFilter
}

type PageConnectionEdges {
  cursor: String!
  node: Page
}

type PageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PageConnectionEdges]
}

type HomePageStats {
  value: String!
  label: String!
}

type HomePageFeatures {
  title: String!
  description: String!
  icon: String
}

type HomePageValueCards {
  title: String!
  description: String!
  icon: String
}

type HomePageTestimonial {
  quote: String!
  author: String!
  role: String!
  company: String!
}

type HomePageIndustries {
  name: String!
}

type HomePageTeamMembers {
  name: String!
  title: String!
  bio: String!
  image: String!
}

type HomePage implements Node & Document {
  title: String!
  heroHeading: String!
  heroSubheading: String!
  heroImage: String!
  stats: [HomePageStats]
  features: [HomePageFeatures]
  valueCards: [HomePageValueCards]
  testimonial: HomePageTestimonial
  industries: [HomePageIndustries]
  teamMembers: [HomePageTeamMembers]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input HomePageStatsFilter {
  value: StringFilter
  label: StringFilter
}

input HomePageFeaturesFilter {
  title: StringFilter
  description: StringFilter
  icon: StringFilter
}

input HomePageValueCardsFilter {
  title: StringFilter
  description: StringFilter
  icon: StringFilter
}

input HomePageTestimonialFilter {
  quote: StringFilter
  author: StringFilter
  role: StringFilter
  company: StringFilter
}

input HomePageIndustriesFilter {
  name: StringFilter
}

input HomePageTeamMembersFilter {
  name: StringFilter
  title: StringFilter
  bio: StringFilter
  image: ImageFilter
}

input HomePageFilter {
  title: StringFilter
  heroHeading: StringFilter
  heroSubheading: StringFilter
  heroImage: ImageFilter
  stats: HomePageStatsFilter
  features: HomePageFeaturesFilter
  valueCards: HomePageValueCardsFilter
  testimonial: HomePageTestimonialFilter
  industries: HomePageIndustriesFilter
  teamMembers: HomePageTeamMembersFilter
}

type HomePageConnectionEdges {
  cursor: String!
  node: HomePage
}

type HomePageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [HomePageConnectionEdges]
}

type ResultsPageMetrics {
  value: String!
  label: String!
  icon: String
}

type ResultsPageCaseStudies {
  title: String!
  challenge: String!
  approach: String!
  outcome: String!
  client: String!
  clientRole: String!
  company: String!
}

type ResultsPageAchievements {
  text: String!
}

type ResultsPageTestimonial {
  quote: String!
  author: String!
  role: String!
  company: String!
}

type ResultsPage implements Node & Document {
  title: String!
  heroHeading: String!
  heroSubheading: String!
  metrics: [ResultsPageMetrics]
  caseStudies: [ResultsPageCaseStudies]
  achievements: [ResultsPageAchievements]
  testimonial: ResultsPageTestimonial
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input ResultsPageMetricsFilter {
  value: StringFilter
  label: StringFilter
  icon: StringFilter
}

input ResultsPageCaseStudiesFilter {
  title: StringFilter
  challenge: StringFilter
  approach: StringFilter
  outcome: StringFilter
  client: StringFilter
  clientRole: StringFilter
  company: StringFilter
}

input ResultsPageAchievementsFilter {
  text: StringFilter
}

input ResultsPageTestimonialFilter {
  quote: StringFilter
  author: StringFilter
  role: StringFilter
  company: StringFilter
}

input ResultsPageFilter {
  title: StringFilter
  heroHeading: StringFilter
  heroSubheading: StringFilter
  metrics: ResultsPageMetricsFilter
  caseStudies: ResultsPageCaseStudiesFilter
  achievements: ResultsPageAchievementsFilter
  testimonial: ResultsPageTestimonialFilter
}

type ResultsPageConnectionEdges {
  cursor: String!
  node: ResultsPage
}

type ResultsPageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ResultsPageConnectionEdges]
}

type ServicesPageServices {
  title: String!
  description: String!
  icon: String
}

type ServicesPage implements Node & Document {
  title: String!
  heroHeading: String!
  heroSubheading: String!
  services: [ServicesPageServices]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input ServicesPageServicesFilter {
  title: StringFilter
  description: StringFilter
  icon: StringFilter
}

input ServicesPageFilter {
  title: StringFilter
  heroHeading: StringFilter
  heroSubheading: StringFilter
  services: ServicesPageServicesFilter
}

type ServicesPageConnectionEdges {
  cursor: String!
  node: ServicesPage
}

type ServicesPageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ServicesPageConnectionEdges]
}

type TeamPageTeamMembers {
  name: String!
  title: String!
  bio: String!
  image: String!
  email: String
  phone: String
  linkedin: String
}

type TeamPage implements Node & Document {
  title: String!
  heroHeading: String!
  heroSubheading: String!
  teamMembers: [TeamPageTeamMembers]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input TeamPageTeamMembersFilter {
  name: StringFilter
  title: StringFilter
  bio: StringFilter
  image: ImageFilter
  email: StringFilter
  phone: StringFilter
  linkedin: StringFilter
}

input TeamPageFilter {
  title: StringFilter
  heroHeading: StringFilter
  heroSubheading: StringFilter
  teamMembers: TeamPageTeamMembersFilter
}

type TeamPageConnectionEdges {
  cursor: String!
  node: TeamPage
}

type TeamPageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [TeamPageConnectionEdges]
}

type ContactPageOffices {
  city: String!
  address: String!
  phone: String
  email: String
}

type ContactPageContactForm {
  heading: String!
  subheading: String
  successMessage: String
}

type ContactPage implements Node & Document {
  title: String!
  heroHeading: String!
  heroSubheading: String!
  offices: [ContactPageOffices]
  contactForm: ContactPageContactForm
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input ContactPageOfficesFilter {
  city: StringFilter
  address: StringFilter
  phone: StringFilter
  email: StringFilter
}

input ContactPageContactFormFilter {
  heading: StringFilter
  subheading: StringFilter
  successMessage: StringFilter
}

input ContactPageFilter {
  title: StringFilter
  heroHeading: StringFilter
  heroSubheading: StringFilter
  offices: ContactPageOfficesFilter
  contactForm: ContactPageContactFormFilter
}

type ContactPageConnectionEdges {
  cursor: String!
  node: ContactPage
}

type ContactPageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ContactPageConnectionEdges]
}

type ApproachPageApproachSteps {
  title: String!
  description: String!
  stepNumber: Float!
}

type ApproachPagePrinciples {
  title: String!
  description: String!
  icon: String
}

type ApproachPage implements Node & Document {
  title: String!
  heroHeading: String!
  heroSubheading: String!
  approachSteps: [ApproachPageApproachSteps]
  principles: [ApproachPagePrinciples]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input NumberFilter {
  lt: Float
  lte: Float
  gte: Float
  gt: Float
  eq: Float
  exists: Boolean
  in: [Float]
}

input ApproachPageApproachStepsFilter {
  title: StringFilter
  description: StringFilter
  stepNumber: NumberFilter
}

input ApproachPagePrinciplesFilter {
  title: StringFilter
  description: StringFilter
  icon: StringFilter
}

input ApproachPageFilter {
  title: StringFilter
  heroHeading: StringFilter
  heroSubheading: StringFilter
  approachSteps: ApproachPageApproachStepsFilter
  principles: ApproachPagePrinciplesFilter
}

type ApproachPageConnectionEdges {
  cursor: String!
  node: ApproachPage
}

type ApproachPageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ApproachPageConnectionEdges]
}

type UpdatesPageFeaturedCategories {
  name: String!
  description: String
}

type UpdatesPage implements Node & Document {
  title: String!
  heroHeading: String!
  heroSubheading: String!
  featuredCategories: [UpdatesPageFeaturedCategories]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input UpdatesPageFeaturedCategoriesFilter {
  name: StringFilter
  description: StringFilter
}

input UpdatesPageFilter {
  title: StringFilter
  heroHeading: StringFilter
  heroSubheading: StringFilter
  featuredCategories: UpdatesPageFeaturedCategoriesFilter
}

type UpdatesPageConnectionEdges {
  cursor: String!
  node: UpdatesPage
}

type UpdatesPageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [UpdatesPageConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createFolder(collection: String, relativePath: String!): DocumentNode!
  updatePost(relativePath: String!, params: PostMutation!): Post!
  createPost(relativePath: String!, params: PostMutation!): Post!
  updatePage(relativePath: String!, params: PageMutation!): Page!
  createPage(relativePath: String!, params: PageMutation!): Page!
  updateHomePage(relativePath: String!, params: HomePageMutation!): HomePage!
  createHomePage(relativePath: String!, params: HomePageMutation!): HomePage!
  updateResultsPage(relativePath: String!, params: ResultsPageMutation!): ResultsPage!
  createResultsPage(relativePath: String!, params: ResultsPageMutation!): ResultsPage!
  updateServicesPage(relativePath: String!, params: ServicesPageMutation!): ServicesPage!
  createServicesPage(relativePath: String!, params: ServicesPageMutation!): ServicesPage!
  updateTeamPage(relativePath: String!, params: TeamPageMutation!): TeamPage!
  createTeamPage(relativePath: String!, params: TeamPageMutation!): TeamPage!
  updateContactPage(relativePath: String!, params: ContactPageMutation!): ContactPage!
  createContactPage(relativePath: String!, params: ContactPageMutation!): ContactPage!
  updateApproachPage(relativePath: String!, params: ApproachPageMutation!): ApproachPage!
  createApproachPage(relativePath: String!, params: ApproachPageMutation!): ApproachPage!
  updateUpdatesPage(relativePath: String!, params: UpdatesPageMutation!): UpdatesPage!
  createUpdatesPage(relativePath: String!, params: UpdatesPageMutation!): UpdatesPage!
}

input DocumentUpdateMutation {
  post: PostMutation
  page: PageMutation
  homePage: HomePageMutation
  resultsPage: ResultsPageMutation
  servicesPage: ServicesPageMutation
  teamPage: TeamPageMutation
  contactPage: ContactPageMutation
  approachPage: ApproachPageMutation
  updatesPage: UpdatesPageMutation
  relativePath: String
}

input DocumentMutation {
  post: PostMutation
  page: PageMutation
  homePage: HomePageMutation
  resultsPage: ResultsPageMutation
  servicesPage: ServicesPageMutation
  teamPage: TeamPageMutation
  contactPage: ContactPageMutation
  approachPage: ApproachPageMutation
  updatesPage: UpdatesPageMutation
}

input PostMutation {
  title: String
  excerpt: String
  date: String
  author: String
  authorTitle: String
  readTime: String
  category: String
  tags: [String]
  featured: Boolean
  image: String
  body: JSON
}

input PageMutation {
  title: String
  description: String
  body: JSON
}

input HomePageStatsMutation {
  value: String
  label: String
}

input HomePageFeaturesMutation {
  title: String
  description: String
  icon: String
}

input HomePageValueCardsMutation {
  title: String
  description: String
  icon: String
}

input HomePageTestimonialMutation {
  quote: String
  author: String
  role: String
  company: String
}

input HomePageIndustriesMutation {
  name: String
}

input HomePageTeamMembersMutation {
  name: String
  title: String
  bio: String
  image: String
}

input HomePageMutation {
  title: String
  heroHeading: String
  heroSubheading: String
  heroImage: String
  stats: [HomePageStatsMutation]
  features: [HomePageFeaturesMutation]
  valueCards: [HomePageValueCardsMutation]
  testimonial: HomePageTestimonialMutation
  industries: [HomePageIndustriesMutation]
  teamMembers: [HomePageTeamMembersMutation]
}

input ResultsPageMetricsMutation {
  value: String
  label: String
  icon: String
}

input ResultsPageCaseStudiesMutation {
  title: String
  challenge: String
  approach: String
  outcome: String
  client: String
  clientRole: String
  company: String
}

input ResultsPageAchievementsMutation {
  text: String
}

input ResultsPageTestimonialMutation {
  quote: String
  author: String
  role: String
  company: String
}

input ResultsPageMutation {
  title: String
  heroHeading: String
  heroSubheading: String
  metrics: [ResultsPageMetricsMutation]
  caseStudies: [ResultsPageCaseStudiesMutation]
  achievements: [ResultsPageAchievementsMutation]
  testimonial: ResultsPageTestimonialMutation
}

input ServicesPageServicesMutation {
  title: String
  description: String
  icon: String
}

input ServicesPageMutation {
  title: String
  heroHeading: String
  heroSubheading: String
  services: [ServicesPageServicesMutation]
}

input TeamPageTeamMembersMutation {
  name: String
  title: String
  bio: String
  image: String
  email: String
  phone: String
  linkedin: String
}

input TeamPageMutation {
  title: String
  heroHeading: String
  heroSubheading: String
  teamMembers: [TeamPageTeamMembersMutation]
}

input ContactPageOfficesMutation {
  city: String
  address: String
  phone: String
  email: String
}

input ContactPageContactFormMutation {
  heading: String
  subheading: String
  successMessage: String
}

input ContactPageMutation {
  title: String
  heroHeading: String
  heroSubheading: String
  offices: [ContactPageOfficesMutation]
  contactForm: ContactPageContactFormMutation
}

input ApproachPageApproachStepsMutation {
  title: String
  description: String
  stepNumber: Float
}

input ApproachPagePrinciplesMutation {
  title: String
  description: String
  icon: String
}

input ApproachPageMutation {
  title: String
  heroHeading: String
  heroSubheading: String
  approachSteps: [ApproachPageApproachStepsMutation]
  principles: [ApproachPagePrinciplesMutation]
}

input UpdatesPageFeaturedCategoriesMutation {
  name: String
  description: String
}

input UpdatesPageMutation {
  title: String
  heroHeading: String
  heroSubheading: String
  featuredCategories: [UpdatesPageFeaturedCategoriesMutation]
}

schema {
  query: Query
  mutation: Mutation
}
