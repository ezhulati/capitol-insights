//@ts-nocheck
  // DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
  export function gql(strings: TemplateStringsArray, ...args: string[]): string {
    let str = ''
    strings.forEach((string, i) => {
      str += string + (args[i] || '')
    })
    return str
  }
  export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** References another document, used as a foreign key */
  Reference: { input: any; output: any; }
  JSON: { input: any; output: any; }
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String']['output'];
  title?: Maybe<Scalars['String']['output']>;
  basename: Scalars['String']['output'];
  hasReferences?: Maybe<Scalars['Boolean']['output']>;
  breadcrumbs: Array<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  relativePath: Scalars['String']['output'];
  extension: Scalars['String']['output'];
  template: Scalars['String']['output'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Folder = {
  __typename?: 'Folder';
  name: Scalars['String']['output'];
  path: Scalars['String']['output'];
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean']['output'];
  hasNextPage: Scalars['Boolean']['output'];
  startCursor: Scalars['String']['output'];
  endCursor: Scalars['String']['output'];
};

export type Node = {
  id: Scalars['ID']['output'];
};

export type Document = {
  id: Scalars['ID']['output'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON']['output'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float']['output'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']['output']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  post: Post;
  postConnection: PostConnection;
  homePage: HomePage;
  homePageConnection: HomePageConnection;
  page: Page;
  pageConnection: PageConnection;
  approachPage: ApproachPage;
  approachPageConnection: ApproachPageConnection;
  resultsPage: ResultsPage;
  resultsPageConnection: ResultsPageConnection;
  servicesPage: ServicesPage;
  servicesPageConnection: ServicesPageConnection;
  teamPage: TeamPage;
  teamPageConnection: TeamPageConnection;
  contactPage: ContactPage;
  contactPageConnection: ContactPageConnection;
  updatesPage: UpdatesPage;
  updatesPageConnection: UpdatesPageConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String']['input'];
};


export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']['input']>;
};


export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryPostArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryPostConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PostFilter>;
};


export type QueryHomePageArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryHomePageConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<HomePageFilter>;
};


export type QueryPageArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryPageConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PageFilter>;
};


export type QueryApproachPageArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryApproachPageConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ApproachPageFilter>;
};


export type QueryResultsPageArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryResultsPageConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ResultsPageFilter>;
};


export type QueryServicesPageArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryServicesPageConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ServicesPageFilter>;
};


export type QueryTeamPageArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryTeamPageConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<TeamPageFilter>;
};


export type QueryContactPageArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryContactPageConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ContactPageFilter>;
};


export type QueryUpdatesPageArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryUpdatesPageConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<UpdatesPageFilter>;
};

export type DocumentFilter = {
  post?: InputMaybe<PostFilter>;
  homePage?: InputMaybe<HomePageFilter>;
  page?: InputMaybe<PageFilter>;
  approachPage?: InputMaybe<ApproachPageFilter>;
  resultsPage?: InputMaybe<ResultsPageFilter>;
  servicesPage?: InputMaybe<ServicesPageFilter>;
  teamPage?: InputMaybe<TeamPageFilter>;
  contactPage?: InputMaybe<ContactPageFilter>;
  updatesPage?: InputMaybe<UpdatesPageFilter>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String']['output'];
  slug: Scalars['String']['output'];
  label?: Maybe<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  format?: Maybe<Scalars['String']['output']>;
  matches?: Maybe<Scalars['String']['output']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<DocumentFilter>;
  folder?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentNode = Post | HomePage | Page | ApproachPage | ResultsPage | ServicesPage | TeamPage | ContactPage | UpdatesPage | Folder;

export type PostSchemaMarkup = {
  __typename?: 'PostSchemaMarkup';
  type: Scalars['String']['output'];
  headline?: Maybe<Scalars['String']['output']>;
  datePublished?: Maybe<Scalars['String']['output']>;
  dateModified?: Maybe<Scalars['String']['output']>;
  authorName?: Maybe<Scalars['String']['output']>;
  publisherName?: Maybe<Scalars['String']['output']>;
  publisherLogo?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
};

export type Post = Node & Document & {
  __typename?: 'Post';
  title: Scalars['String']['output'];
  metaDescription?: Maybe<Scalars['String']['output']>;
  metaKeywords?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  excerpt: Scalars['String']['output'];
  date: Scalars['String']['output'];
  author: Scalars['String']['output'];
  authorTitle: Scalars['String']['output'];
  readTime: Scalars['String']['output'];
  category: Scalars['String']['output'];
  tags: Array<Scalars['String']['output']>;
  featured: Scalars['Boolean']['output'];
  image: Scalars['String']['output'];
  body?: Maybe<Scalars['JSON']['output']>;
  schemaMarkup?: Maybe<PostSchemaMarkup>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type StringFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type DatetimeFilter = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type BooleanFilter = {
  eq?: InputMaybe<Scalars['Boolean']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ImageFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type RichTextFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
};

export type PostSchemaMarkupFilter = {
  type?: InputMaybe<StringFilter>;
  headline?: InputMaybe<StringFilter>;
  datePublished?: InputMaybe<DatetimeFilter>;
  dateModified?: InputMaybe<DatetimeFilter>;
  authorName?: InputMaybe<StringFilter>;
  publisherName?: InputMaybe<StringFilter>;
  publisherLogo?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
};

export type PostFilter = {
  title?: InputMaybe<StringFilter>;
  metaDescription?: InputMaybe<StringFilter>;
  metaKeywords?: InputMaybe<StringFilter>;
  excerpt?: InputMaybe<StringFilter>;
  date?: InputMaybe<DatetimeFilter>;
  author?: InputMaybe<StringFilter>;
  authorTitle?: InputMaybe<StringFilter>;
  readTime?: InputMaybe<StringFilter>;
  category?: InputMaybe<StringFilter>;
  tags?: InputMaybe<StringFilter>;
  featured?: InputMaybe<BooleanFilter>;
  image?: InputMaybe<ImageFilter>;
  body?: InputMaybe<RichTextFilter>;
  schemaMarkup?: InputMaybe<PostSchemaMarkupFilter>;
};

export type PostConnectionEdges = {
  __typename?: 'PostConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Post>;
};

export type PostConnection = Connection & {
  __typename?: 'PostConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<PostConnectionEdges>>>;
};

export type HomePageSchemaMarkup = {
  __typename?: 'HomePageSchemaMarkup';
  type: Scalars['String']['output'];
  name?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  url?: Maybe<Scalars['String']['output']>;
  image?: Maybe<Scalars['String']['output']>;
};

export type HomePageStats = {
  __typename?: 'HomePageStats';
  value: Scalars['String']['output'];
  label: Scalars['String']['output'];
};

export type HomePageFeatures = {
  __typename?: 'HomePageFeatures';
  title: Scalars['String']['output'];
  description: Scalars['String']['output'];
  icon?: Maybe<Scalars['String']['output']>;
};

export type HomePageValueCards = {
  __typename?: 'HomePageValueCards';
  title: Scalars['String']['output'];
  description: Scalars['String']['output'];
  icon?: Maybe<Scalars['String']['output']>;
};

export type HomePageTestimonial = {
  __typename?: 'HomePageTestimonial';
  quote: Scalars['String']['output'];
  author: Scalars['String']['output'];
  role: Scalars['String']['output'];
  company: Scalars['String']['output'];
};

export type HomePageIndustries = {
  __typename?: 'HomePageIndustries';
  name: Scalars['String']['output'];
};

export type HomePageTeamMembers = {
  __typename?: 'HomePageTeamMembers';
  name: Scalars['String']['output'];
  title: Scalars['String']['output'];
  bio: Scalars['String']['output'];
  image: Scalars['String']['output'];
};

export type HomePage = Node & Document & {
  __typename?: 'HomePage';
  title: Scalars['String']['output'];
  metaDescription?: Maybe<Scalars['String']['output']>;
  metaKeywords?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  heroHeading: Scalars['String']['output'];
  heroSubheading: Scalars['String']['output'];
  heroImage: Scalars['String']['output'];
  schemaMarkup?: Maybe<HomePageSchemaMarkup>;
  stats?: Maybe<Array<Maybe<HomePageStats>>>;
  features?: Maybe<Array<Maybe<HomePageFeatures>>>;
  valueCards?: Maybe<Array<Maybe<HomePageValueCards>>>;
  testimonial?: Maybe<HomePageTestimonial>;
  industries?: Maybe<Array<Maybe<HomePageIndustries>>>;
  teamMembers?: Maybe<Array<Maybe<HomePageTeamMembers>>>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type HomePageSchemaMarkupFilter = {
  type?: InputMaybe<StringFilter>;
  name?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  url?: InputMaybe<StringFilter>;
  image?: InputMaybe<StringFilter>;
};

export type HomePageStatsFilter = {
  value?: InputMaybe<StringFilter>;
  label?: InputMaybe<StringFilter>;
};

export type HomePageFeaturesFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  icon?: InputMaybe<StringFilter>;
};

export type HomePageValueCardsFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  icon?: InputMaybe<StringFilter>;
};

export type HomePageTestimonialFilter = {
  quote?: InputMaybe<StringFilter>;
  author?: InputMaybe<StringFilter>;
  role?: InputMaybe<StringFilter>;
  company?: InputMaybe<StringFilter>;
};

export type HomePageIndustriesFilter = {
  name?: InputMaybe<StringFilter>;
};

export type HomePageTeamMembersFilter = {
  name?: InputMaybe<StringFilter>;
  title?: InputMaybe<StringFilter>;
  bio?: InputMaybe<StringFilter>;
  image?: InputMaybe<ImageFilter>;
};

export type HomePageFilter = {
  title?: InputMaybe<StringFilter>;
  metaDescription?: InputMaybe<StringFilter>;
  metaKeywords?: InputMaybe<StringFilter>;
  heroHeading?: InputMaybe<StringFilter>;
  heroSubheading?: InputMaybe<StringFilter>;
  heroImage?: InputMaybe<ImageFilter>;
  schemaMarkup?: InputMaybe<HomePageSchemaMarkupFilter>;
  stats?: InputMaybe<HomePageStatsFilter>;
  features?: InputMaybe<HomePageFeaturesFilter>;
  valueCards?: InputMaybe<HomePageValueCardsFilter>;
  testimonial?: InputMaybe<HomePageTestimonialFilter>;
  industries?: InputMaybe<HomePageIndustriesFilter>;
  teamMembers?: InputMaybe<HomePageTeamMembersFilter>;
};

export type HomePageConnectionEdges = {
  __typename?: 'HomePageConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<HomePage>;
};

export type HomePageConnection = Connection & {
  __typename?: 'HomePageConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<HomePageConnectionEdges>>>;
};

export type PageSchemaMarkup = {
  __typename?: 'PageSchemaMarkup';
  type: Scalars['String']['output'];
  name?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  url?: Maybe<Scalars['String']['output']>;
  image?: Maybe<Scalars['String']['output']>;
};

export type Page = Node & Document & {
  __typename?: 'Page';
  title: Scalars['String']['output'];
  metaDescription?: Maybe<Scalars['String']['output']>;
  metaKeywords?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  description: Scalars['String']['output'];
  body?: Maybe<Scalars['JSON']['output']>;
  schemaMarkup?: Maybe<PageSchemaMarkup>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type PageSchemaMarkupFilter = {
  type?: InputMaybe<StringFilter>;
  name?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  url?: InputMaybe<StringFilter>;
  image?: InputMaybe<StringFilter>;
};

export type PageFilter = {
  title?: InputMaybe<StringFilter>;
  metaDescription?: InputMaybe<StringFilter>;
  metaKeywords?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  body?: InputMaybe<RichTextFilter>;
  schemaMarkup?: InputMaybe<PageSchemaMarkupFilter>;
};

export type PageConnectionEdges = {
  __typename?: 'PageConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Page>;
};

export type PageConnection = Connection & {
  __typename?: 'PageConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<PageConnectionEdges>>>;
};

export type ApproachPageSchemaMarkup = {
  __typename?: 'ApproachPageSchemaMarkup';
  type: Scalars['String']['output'];
  name?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  url?: Maybe<Scalars['String']['output']>;
  image?: Maybe<Scalars['String']['output']>;
};

export type ApproachPageApproachSteps = {
  __typename?: 'ApproachPageApproachSteps';
  title: Scalars['String']['output'];
  description: Scalars['String']['output'];
  stepNumber: Scalars['Float']['output'];
};

export type ApproachPagePrinciples = {
  __typename?: 'ApproachPagePrinciples';
  title: Scalars['String']['output'];
  description: Scalars['String']['output'];
  icon?: Maybe<Scalars['String']['output']>;
};

export type ApproachPage = Node & Document & {
  __typename?: 'ApproachPage';
  title: Scalars['String']['output'];
  metaDescription?: Maybe<Scalars['String']['output']>;
  metaKeywords?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  heroHeading: Scalars['String']['output'];
  heroSubheading: Scalars['String']['output'];
  image?: Maybe<Scalars['String']['output']>;
  schemaMarkup?: Maybe<ApproachPageSchemaMarkup>;
  approachSteps?: Maybe<Array<Maybe<ApproachPageApproachSteps>>>;
  principles?: Maybe<Array<Maybe<ApproachPagePrinciples>>>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type ApproachPageSchemaMarkupFilter = {
  type?: InputMaybe<StringFilter>;
  name?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  url?: InputMaybe<StringFilter>;
  image?: InputMaybe<StringFilter>;
};

export type NumberFilter = {
  lt?: InputMaybe<Scalars['Float']['input']>;
  lte?: InputMaybe<Scalars['Float']['input']>;
  gte?: InputMaybe<Scalars['Float']['input']>;
  gt?: InputMaybe<Scalars['Float']['input']>;
  eq?: InputMaybe<Scalars['Float']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['Float']['input']>>>;
};

export type ApproachPageApproachStepsFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  stepNumber?: InputMaybe<NumberFilter>;
};

export type ApproachPagePrinciplesFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  icon?: InputMaybe<StringFilter>;
};

export type ApproachPageFilter = {
  title?: InputMaybe<StringFilter>;
  metaDescription?: InputMaybe<StringFilter>;
  metaKeywords?: InputMaybe<StringFilter>;
  heroHeading?: InputMaybe<StringFilter>;
  heroSubheading?: InputMaybe<StringFilter>;
  image?: InputMaybe<ImageFilter>;
  schemaMarkup?: InputMaybe<ApproachPageSchemaMarkupFilter>;
  approachSteps?: InputMaybe<ApproachPageApproachStepsFilter>;
  principles?: InputMaybe<ApproachPagePrinciplesFilter>;
};

export type ApproachPageConnectionEdges = {
  __typename?: 'ApproachPageConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<ApproachPage>;
};

export type ApproachPageConnection = Connection & {
  __typename?: 'ApproachPageConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<ApproachPageConnectionEdges>>>;
};

export type ResultsPageSchemaMarkup = {
  __typename?: 'ResultsPageSchemaMarkup';
  type: Scalars['String']['output'];
  name?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  url?: Maybe<Scalars['String']['output']>;
  image?: Maybe<Scalars['String']['output']>;
};

export type ResultsPageMetrics = {
  __typename?: 'ResultsPageMetrics';
  value: Scalars['String']['output'];
  label: Scalars['String']['output'];
  icon?: Maybe<Scalars['String']['output']>;
};

export type ResultsPageCaseStudies = {
  __typename?: 'ResultsPageCaseStudies';
  title: Scalars['String']['output'];
  challenge: Scalars['String']['output'];
  approach: Scalars['String']['output'];
  outcome: Scalars['String']['output'];
  client: Scalars['String']['output'];
  clientRole: Scalars['String']['output'];
  company: Scalars['String']['output'];
};

export type ResultsPageAchievements = {
  __typename?: 'ResultsPageAchievements';
  text: Scalars['String']['output'];
};

export type ResultsPageTestimonial = {
  __typename?: 'ResultsPageTestimonial';
  quote: Scalars['String']['output'];
  author: Scalars['String']['output'];
  role: Scalars['String']['output'];
  company: Scalars['String']['output'];
};

export type ResultsPage = Node & Document & {
  __typename?: 'ResultsPage';
  title: Scalars['String']['output'];
  metaDescription?: Maybe<Scalars['String']['output']>;
  metaKeywords?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  heroHeading: Scalars['String']['output'];
  heroSubheading: Scalars['String']['output'];
  schemaMarkup?: Maybe<ResultsPageSchemaMarkup>;
  metrics?: Maybe<Array<Maybe<ResultsPageMetrics>>>;
  caseStudies?: Maybe<Array<Maybe<ResultsPageCaseStudies>>>;
  achievements?: Maybe<Array<Maybe<ResultsPageAchievements>>>;
  testimonial?: Maybe<ResultsPageTestimonial>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type ResultsPageSchemaMarkupFilter = {
  type?: InputMaybe<StringFilter>;
  name?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  url?: InputMaybe<StringFilter>;
  image?: InputMaybe<StringFilter>;
};

export type ResultsPageMetricsFilter = {
  value?: InputMaybe<StringFilter>;
  label?: InputMaybe<StringFilter>;
  icon?: InputMaybe<StringFilter>;
};

export type ResultsPageCaseStudiesFilter = {
  title?: InputMaybe<StringFilter>;
  challenge?: InputMaybe<StringFilter>;
  approach?: InputMaybe<StringFilter>;
  outcome?: InputMaybe<StringFilter>;
  client?: InputMaybe<StringFilter>;
  clientRole?: InputMaybe<StringFilter>;
  company?: InputMaybe<StringFilter>;
};

export type ResultsPageAchievementsFilter = {
  text?: InputMaybe<StringFilter>;
};

export type ResultsPageTestimonialFilter = {
  quote?: InputMaybe<StringFilter>;
  author?: InputMaybe<StringFilter>;
  role?: InputMaybe<StringFilter>;
  company?: InputMaybe<StringFilter>;
};

export type ResultsPageFilter = {
  title?: InputMaybe<StringFilter>;
  metaDescription?: InputMaybe<StringFilter>;
  metaKeywords?: InputMaybe<StringFilter>;
  heroHeading?: InputMaybe<StringFilter>;
  heroSubheading?: InputMaybe<StringFilter>;
  schemaMarkup?: InputMaybe<ResultsPageSchemaMarkupFilter>;
  metrics?: InputMaybe<ResultsPageMetricsFilter>;
  caseStudies?: InputMaybe<ResultsPageCaseStudiesFilter>;
  achievements?: InputMaybe<ResultsPageAchievementsFilter>;
  testimonial?: InputMaybe<ResultsPageTestimonialFilter>;
};

export type ResultsPageConnectionEdges = {
  __typename?: 'ResultsPageConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<ResultsPage>;
};

export type ResultsPageConnection = Connection & {
  __typename?: 'ResultsPageConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<ResultsPageConnectionEdges>>>;
};

export type ServicesPageSchemaMarkup = {
  __typename?: 'ServicesPageSchemaMarkup';
  type: Scalars['String']['output'];
  name?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  url?: Maybe<Scalars['String']['output']>;
  image?: Maybe<Scalars['String']['output']>;
};

export type ServicesPageServices = {
  __typename?: 'ServicesPageServices';
  title: Scalars['String']['output'];
  description: Scalars['String']['output'];
  icon?: Maybe<Scalars['String']['output']>;
};

export type ServicesPage = Node & Document & {
  __typename?: 'ServicesPage';
  title: Scalars['String']['output'];
  metaDescription?: Maybe<Scalars['String']['output']>;
  metaKeywords?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  heroHeading: Scalars['String']['output'];
  heroSubheading: Scalars['String']['output'];
  schemaMarkup?: Maybe<ServicesPageSchemaMarkup>;
  services?: Maybe<Array<Maybe<ServicesPageServices>>>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type ServicesPageSchemaMarkupFilter = {
  type?: InputMaybe<StringFilter>;
  name?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  url?: InputMaybe<StringFilter>;
  image?: InputMaybe<StringFilter>;
};

export type ServicesPageServicesFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  icon?: InputMaybe<StringFilter>;
};

export type ServicesPageFilter = {
  title?: InputMaybe<StringFilter>;
  metaDescription?: InputMaybe<StringFilter>;
  metaKeywords?: InputMaybe<StringFilter>;
  heroHeading?: InputMaybe<StringFilter>;
  heroSubheading?: InputMaybe<StringFilter>;
  schemaMarkup?: InputMaybe<ServicesPageSchemaMarkupFilter>;
  services?: InputMaybe<ServicesPageServicesFilter>;
};

export type ServicesPageConnectionEdges = {
  __typename?: 'ServicesPageConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<ServicesPage>;
};

export type ServicesPageConnection = Connection & {
  __typename?: 'ServicesPageConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<ServicesPageConnectionEdges>>>;
};

export type TeamPageSchemaMarkup = {
  __typename?: 'TeamPageSchemaMarkup';
  type: Scalars['String']['output'];
  name?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  url?: Maybe<Scalars['String']['output']>;
  image?: Maybe<Scalars['String']['output']>;
};

export type TeamPageTeamMembers = {
  __typename?: 'TeamPageTeamMembers';
  name: Scalars['String']['output'];
  title: Scalars['String']['output'];
  bio: Scalars['String']['output'];
  image: Scalars['String']['output'];
  email?: Maybe<Scalars['String']['output']>;
  phone?: Maybe<Scalars['String']['output']>;
  linkedin?: Maybe<Scalars['String']['output']>;
};

export type TeamPage = Node & Document & {
  __typename?: 'TeamPage';
  title: Scalars['String']['output'];
  metaDescription?: Maybe<Scalars['String']['output']>;
  metaKeywords?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  heroHeading: Scalars['String']['output'];
  heroSubheading: Scalars['String']['output'];
  schemaMarkup?: Maybe<TeamPageSchemaMarkup>;
  teamMembers?: Maybe<Array<Maybe<TeamPageTeamMembers>>>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type TeamPageSchemaMarkupFilter = {
  type?: InputMaybe<StringFilter>;
  name?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  url?: InputMaybe<StringFilter>;
  image?: InputMaybe<StringFilter>;
};

export type TeamPageTeamMembersFilter = {
  name?: InputMaybe<StringFilter>;
  title?: InputMaybe<StringFilter>;
  bio?: InputMaybe<StringFilter>;
  image?: InputMaybe<ImageFilter>;
  email?: InputMaybe<StringFilter>;
  phone?: InputMaybe<StringFilter>;
  linkedin?: InputMaybe<StringFilter>;
};

export type TeamPageFilter = {
  title?: InputMaybe<StringFilter>;
  metaDescription?: InputMaybe<StringFilter>;
  metaKeywords?: InputMaybe<StringFilter>;
  heroHeading?: InputMaybe<StringFilter>;
  heroSubheading?: InputMaybe<StringFilter>;
  schemaMarkup?: InputMaybe<TeamPageSchemaMarkupFilter>;
  teamMembers?: InputMaybe<TeamPageTeamMembersFilter>;
};

export type TeamPageConnectionEdges = {
  __typename?: 'TeamPageConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<TeamPage>;
};

export type TeamPageConnection = Connection & {
  __typename?: 'TeamPageConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<TeamPageConnectionEdges>>>;
};

export type ContactPageSchemaMarkup = {
  __typename?: 'ContactPageSchemaMarkup';
  type: Scalars['String']['output'];
  name?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  url?: Maybe<Scalars['String']['output']>;
  image?: Maybe<Scalars['String']['output']>;
};

export type ContactPageOffices = {
  __typename?: 'ContactPageOffices';
  city: Scalars['String']['output'];
  address: Scalars['String']['output'];
  phone?: Maybe<Scalars['String']['output']>;
  email?: Maybe<Scalars['String']['output']>;
};

export type ContactPageContactForm = {
  __typename?: 'ContactPageContactForm';
  heading: Scalars['String']['output'];
  subheading?: Maybe<Scalars['String']['output']>;
  successMessage?: Maybe<Scalars['String']['output']>;
};

export type ContactPage = Node & Document & {
  __typename?: 'ContactPage';
  title: Scalars['String']['output'];
  metaDescription?: Maybe<Scalars['String']['output']>;
  metaKeywords?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  heroHeading: Scalars['String']['output'];
  heroSubheading: Scalars['String']['output'];
  schemaMarkup?: Maybe<ContactPageSchemaMarkup>;
  offices?: Maybe<Array<Maybe<ContactPageOffices>>>;
  contactForm?: Maybe<ContactPageContactForm>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type ContactPageSchemaMarkupFilter = {
  type?: InputMaybe<StringFilter>;
  name?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  url?: InputMaybe<StringFilter>;
  image?: InputMaybe<StringFilter>;
};

export type ContactPageOfficesFilter = {
  city?: InputMaybe<StringFilter>;
  address?: InputMaybe<StringFilter>;
  phone?: InputMaybe<StringFilter>;
  email?: InputMaybe<StringFilter>;
};

export type ContactPageContactFormFilter = {
  heading?: InputMaybe<StringFilter>;
  subheading?: InputMaybe<StringFilter>;
  successMessage?: InputMaybe<StringFilter>;
};

export type ContactPageFilter = {
  title?: InputMaybe<StringFilter>;
  metaDescription?: InputMaybe<StringFilter>;
  metaKeywords?: InputMaybe<StringFilter>;
  heroHeading?: InputMaybe<StringFilter>;
  heroSubheading?: InputMaybe<StringFilter>;
  schemaMarkup?: InputMaybe<ContactPageSchemaMarkupFilter>;
  offices?: InputMaybe<ContactPageOfficesFilter>;
  contactForm?: InputMaybe<ContactPageContactFormFilter>;
};

export type ContactPageConnectionEdges = {
  __typename?: 'ContactPageConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<ContactPage>;
};

export type ContactPageConnection = Connection & {
  __typename?: 'ContactPageConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<ContactPageConnectionEdges>>>;
};

export type UpdatesPageSchemaMarkup = {
  __typename?: 'UpdatesPageSchemaMarkup';
  type: Scalars['String']['output'];
  name?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  url?: Maybe<Scalars['String']['output']>;
  image?: Maybe<Scalars['String']['output']>;
};

export type UpdatesPageFeaturedCategories = {
  __typename?: 'UpdatesPageFeaturedCategories';
  name: Scalars['String']['output'];
  description?: Maybe<Scalars['String']['output']>;
};

export type UpdatesPage = Node & Document & {
  __typename?: 'UpdatesPage';
  title: Scalars['String']['output'];
  metaDescription?: Maybe<Scalars['String']['output']>;
  metaKeywords?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  heroHeading: Scalars['String']['output'];
  heroSubheading: Scalars['String']['output'];
  schemaMarkup?: Maybe<UpdatesPageSchemaMarkup>;
  featuredCategories?: Maybe<Array<Maybe<UpdatesPageFeaturedCategories>>>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type UpdatesPageSchemaMarkupFilter = {
  type?: InputMaybe<StringFilter>;
  name?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  url?: InputMaybe<StringFilter>;
  image?: InputMaybe<StringFilter>;
};

export type UpdatesPageFeaturedCategoriesFilter = {
  name?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
};

export type UpdatesPageFilter = {
  title?: InputMaybe<StringFilter>;
  metaDescription?: InputMaybe<StringFilter>;
  metaKeywords?: InputMaybe<StringFilter>;
  heroHeading?: InputMaybe<StringFilter>;
  heroSubheading?: InputMaybe<StringFilter>;
  schemaMarkup?: InputMaybe<UpdatesPageSchemaMarkupFilter>;
  featuredCategories?: InputMaybe<UpdatesPageFeaturedCategoriesFilter>;
};

export type UpdatesPageConnectionEdges = {
  __typename?: 'UpdatesPageConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<UpdatesPage>;
};

export type UpdatesPageConnection = Connection & {
  __typename?: 'UpdatesPageConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<UpdatesPageConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  createFolder: DocumentNode;
  updatePost: Post;
  createPost: Post;
  updateHomePage: HomePage;
  createHomePage: HomePage;
  updatePage: Page;
  createPage: Page;
  updateApproachPage: ApproachPage;
  createApproachPage: ApproachPage;
  updateResultsPage: ResultsPage;
  createResultsPage: ResultsPage;
  updateServicesPage: ServicesPage;
  createServicesPage: ServicesPage;
  updateTeamPage: TeamPage;
  createTeamPage: TeamPage;
  updateContactPage: ContactPage;
  createContactPage: ContactPage;
  updateUpdatesPage: UpdatesPage;
  createUpdatesPage: UpdatesPage;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String']['input'];
  relativePath: Scalars['String']['input'];
  template?: InputMaybe<Scalars['String']['input']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentUpdateMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentMutation;
};


export type MutationCreateFolderArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationUpdatePostArgs = {
  relativePath: Scalars['String']['input'];
  params: PostMutation;
};


export type MutationCreatePostArgs = {
  relativePath: Scalars['String']['input'];
  params: PostMutation;
};


export type MutationUpdateHomePageArgs = {
  relativePath: Scalars['String']['input'];
  params: HomePageMutation;
};


export type MutationCreateHomePageArgs = {
  relativePath: Scalars['String']['input'];
  params: HomePageMutation;
};


export type MutationUpdatePageArgs = {
  relativePath: Scalars['String']['input'];
  params: PageMutation;
};


export type MutationCreatePageArgs = {
  relativePath: Scalars['String']['input'];
  params: PageMutation;
};


export type MutationUpdateApproachPageArgs = {
  relativePath: Scalars['String']['input'];
  params: ApproachPageMutation;
};


export type MutationCreateApproachPageArgs = {
  relativePath: Scalars['String']['input'];
  params: ApproachPageMutation;
};


export type MutationUpdateResultsPageArgs = {
  relativePath: Scalars['String']['input'];
  params: ResultsPageMutation;
};


export type MutationCreateResultsPageArgs = {
  relativePath: Scalars['String']['input'];
  params: ResultsPageMutation;
};


export type MutationUpdateServicesPageArgs = {
  relativePath: Scalars['String']['input'];
  params: ServicesPageMutation;
};


export type MutationCreateServicesPageArgs = {
  relativePath: Scalars['String']['input'];
  params: ServicesPageMutation;
};


export type MutationUpdateTeamPageArgs = {
  relativePath: Scalars['String']['input'];
  params: TeamPageMutation;
};


export type MutationCreateTeamPageArgs = {
  relativePath: Scalars['String']['input'];
  params: TeamPageMutation;
};


export type MutationUpdateContactPageArgs = {
  relativePath: Scalars['String']['input'];
  params: ContactPageMutation;
};


export type MutationCreateContactPageArgs = {
  relativePath: Scalars['String']['input'];
  params: ContactPageMutation;
};


export type MutationUpdateUpdatesPageArgs = {
  relativePath: Scalars['String']['input'];
  params: UpdatesPageMutation;
};


export type MutationCreateUpdatesPageArgs = {
  relativePath: Scalars['String']['input'];
  params: UpdatesPageMutation;
};

export type DocumentUpdateMutation = {
  post?: InputMaybe<PostMutation>;
  homePage?: InputMaybe<HomePageMutation>;
  page?: InputMaybe<PageMutation>;
  approachPage?: InputMaybe<ApproachPageMutation>;
  resultsPage?: InputMaybe<ResultsPageMutation>;
  servicesPage?: InputMaybe<ServicesPageMutation>;
  teamPage?: InputMaybe<TeamPageMutation>;
  contactPage?: InputMaybe<ContactPageMutation>;
  updatesPage?: InputMaybe<UpdatesPageMutation>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentMutation = {
  post?: InputMaybe<PostMutation>;
  homePage?: InputMaybe<HomePageMutation>;
  page?: InputMaybe<PageMutation>;
  approachPage?: InputMaybe<ApproachPageMutation>;
  resultsPage?: InputMaybe<ResultsPageMutation>;
  servicesPage?: InputMaybe<ServicesPageMutation>;
  teamPage?: InputMaybe<TeamPageMutation>;
  contactPage?: InputMaybe<ContactPageMutation>;
  updatesPage?: InputMaybe<UpdatesPageMutation>;
};

export type PostSchemaMarkupMutation = {
  type?: InputMaybe<Scalars['String']['input']>;
  headline?: InputMaybe<Scalars['String']['input']>;
  datePublished?: InputMaybe<Scalars['String']['input']>;
  dateModified?: InputMaybe<Scalars['String']['input']>;
  authorName?: InputMaybe<Scalars['String']['input']>;
  publisherName?: InputMaybe<Scalars['String']['input']>;
  publisherLogo?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
};

export type PostMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  metaDescription?: InputMaybe<Scalars['String']['input']>;
  metaKeywords?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  excerpt?: InputMaybe<Scalars['String']['input']>;
  date?: InputMaybe<Scalars['String']['input']>;
  author?: InputMaybe<Scalars['String']['input']>;
  authorTitle?: InputMaybe<Scalars['String']['input']>;
  readTime?: InputMaybe<Scalars['String']['input']>;
  category?: InputMaybe<Scalars['String']['input']>;
  tags?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  featured?: InputMaybe<Scalars['Boolean']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
  body?: InputMaybe<Scalars['JSON']['input']>;
  schemaMarkup?: InputMaybe<PostSchemaMarkupMutation>;
};

export type HomePageSchemaMarkupMutation = {
  type?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
};

export type HomePageStatsMutation = {
  value?: InputMaybe<Scalars['String']['input']>;
  label?: InputMaybe<Scalars['String']['input']>;
};

export type HomePageFeaturesMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  icon?: InputMaybe<Scalars['String']['input']>;
};

export type HomePageValueCardsMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  icon?: InputMaybe<Scalars['String']['input']>;
};

export type HomePageTestimonialMutation = {
  quote?: InputMaybe<Scalars['String']['input']>;
  author?: InputMaybe<Scalars['String']['input']>;
  role?: InputMaybe<Scalars['String']['input']>;
  company?: InputMaybe<Scalars['String']['input']>;
};

export type HomePageIndustriesMutation = {
  name?: InputMaybe<Scalars['String']['input']>;
};

export type HomePageTeamMembersMutation = {
  name?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  bio?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
};

export type HomePageMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  metaDescription?: InputMaybe<Scalars['String']['input']>;
  metaKeywords?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  heroHeading?: InputMaybe<Scalars['String']['input']>;
  heroSubheading?: InputMaybe<Scalars['String']['input']>;
  heroImage?: InputMaybe<Scalars['String']['input']>;
  schemaMarkup?: InputMaybe<HomePageSchemaMarkupMutation>;
  stats?: InputMaybe<Array<InputMaybe<HomePageStatsMutation>>>;
  features?: InputMaybe<Array<InputMaybe<HomePageFeaturesMutation>>>;
  valueCards?: InputMaybe<Array<InputMaybe<HomePageValueCardsMutation>>>;
  testimonial?: InputMaybe<HomePageTestimonialMutation>;
  industries?: InputMaybe<Array<InputMaybe<HomePageIndustriesMutation>>>;
  teamMembers?: InputMaybe<Array<InputMaybe<HomePageTeamMembersMutation>>>;
};

export type PageSchemaMarkupMutation = {
  type?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
};

export type PageMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  metaDescription?: InputMaybe<Scalars['String']['input']>;
  metaKeywords?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  description?: InputMaybe<Scalars['String']['input']>;
  body?: InputMaybe<Scalars['JSON']['input']>;
  schemaMarkup?: InputMaybe<PageSchemaMarkupMutation>;
};

export type ApproachPageSchemaMarkupMutation = {
  type?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
};

export type ApproachPageApproachStepsMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  stepNumber?: InputMaybe<Scalars['Float']['input']>;
};

export type ApproachPagePrinciplesMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  icon?: InputMaybe<Scalars['String']['input']>;
};

export type ApproachPageMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  metaDescription?: InputMaybe<Scalars['String']['input']>;
  metaKeywords?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  heroHeading?: InputMaybe<Scalars['String']['input']>;
  heroSubheading?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
  schemaMarkup?: InputMaybe<ApproachPageSchemaMarkupMutation>;
  approachSteps?: InputMaybe<Array<InputMaybe<ApproachPageApproachStepsMutation>>>;
  principles?: InputMaybe<Array<InputMaybe<ApproachPagePrinciplesMutation>>>;
};

export type ResultsPageSchemaMarkupMutation = {
  type?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
};

export type ResultsPageMetricsMutation = {
  value?: InputMaybe<Scalars['String']['input']>;
  label?: InputMaybe<Scalars['String']['input']>;
  icon?: InputMaybe<Scalars['String']['input']>;
};

export type ResultsPageCaseStudiesMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  challenge?: InputMaybe<Scalars['String']['input']>;
  approach?: InputMaybe<Scalars['String']['input']>;
  outcome?: InputMaybe<Scalars['String']['input']>;
  client?: InputMaybe<Scalars['String']['input']>;
  clientRole?: InputMaybe<Scalars['String']['input']>;
  company?: InputMaybe<Scalars['String']['input']>;
};

export type ResultsPageAchievementsMutation = {
  text?: InputMaybe<Scalars['String']['input']>;
};

export type ResultsPageTestimonialMutation = {
  quote?: InputMaybe<Scalars['String']['input']>;
  author?: InputMaybe<Scalars['String']['input']>;
  role?: InputMaybe<Scalars['String']['input']>;
  company?: InputMaybe<Scalars['String']['input']>;
};

export type ResultsPageMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  metaDescription?: InputMaybe<Scalars['String']['input']>;
  metaKeywords?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  heroHeading?: InputMaybe<Scalars['String']['input']>;
  heroSubheading?: InputMaybe<Scalars['String']['input']>;
  schemaMarkup?: InputMaybe<ResultsPageSchemaMarkupMutation>;
  metrics?: InputMaybe<Array<InputMaybe<ResultsPageMetricsMutation>>>;
  caseStudies?: InputMaybe<Array<InputMaybe<ResultsPageCaseStudiesMutation>>>;
  achievements?: InputMaybe<Array<InputMaybe<ResultsPageAchievementsMutation>>>;
  testimonial?: InputMaybe<ResultsPageTestimonialMutation>;
};

export type ServicesPageSchemaMarkupMutation = {
  type?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
};

export type ServicesPageServicesMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  icon?: InputMaybe<Scalars['String']['input']>;
};

export type ServicesPageMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  metaDescription?: InputMaybe<Scalars['String']['input']>;
  metaKeywords?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  heroHeading?: InputMaybe<Scalars['String']['input']>;
  heroSubheading?: InputMaybe<Scalars['String']['input']>;
  schemaMarkup?: InputMaybe<ServicesPageSchemaMarkupMutation>;
  services?: InputMaybe<Array<InputMaybe<ServicesPageServicesMutation>>>;
};

export type TeamPageSchemaMarkupMutation = {
  type?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
};

export type TeamPageTeamMembersMutation = {
  name?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  bio?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
  email?: InputMaybe<Scalars['String']['input']>;
  phone?: InputMaybe<Scalars['String']['input']>;
  linkedin?: InputMaybe<Scalars['String']['input']>;
};

export type TeamPageMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  metaDescription?: InputMaybe<Scalars['String']['input']>;
  metaKeywords?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  heroHeading?: InputMaybe<Scalars['String']['input']>;
  heroSubheading?: InputMaybe<Scalars['String']['input']>;
  schemaMarkup?: InputMaybe<TeamPageSchemaMarkupMutation>;
  teamMembers?: InputMaybe<Array<InputMaybe<TeamPageTeamMembersMutation>>>;
};

export type ContactPageSchemaMarkupMutation = {
  type?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
};

export type ContactPageOfficesMutation = {
  city?: InputMaybe<Scalars['String']['input']>;
  address?: InputMaybe<Scalars['String']['input']>;
  phone?: InputMaybe<Scalars['String']['input']>;
  email?: InputMaybe<Scalars['String']['input']>;
};

export type ContactPageContactFormMutation = {
  heading?: InputMaybe<Scalars['String']['input']>;
  subheading?: InputMaybe<Scalars['String']['input']>;
  successMessage?: InputMaybe<Scalars['String']['input']>;
};

export type ContactPageMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  metaDescription?: InputMaybe<Scalars['String']['input']>;
  metaKeywords?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  heroHeading?: InputMaybe<Scalars['String']['input']>;
  heroSubheading?: InputMaybe<Scalars['String']['input']>;
  schemaMarkup?: InputMaybe<ContactPageSchemaMarkupMutation>;
  offices?: InputMaybe<Array<InputMaybe<ContactPageOfficesMutation>>>;
  contactForm?: InputMaybe<ContactPageContactFormMutation>;
};

export type UpdatesPageSchemaMarkupMutation = {
  type?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
};

export type UpdatesPageFeaturedCategoriesMutation = {
  name?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
};

export type UpdatesPageMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  metaDescription?: InputMaybe<Scalars['String']['input']>;
  metaKeywords?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  heroHeading?: InputMaybe<Scalars['String']['input']>;
  heroSubheading?: InputMaybe<Scalars['String']['input']>;
  schemaMarkup?: InputMaybe<UpdatesPageSchemaMarkupMutation>;
  featuredCategories?: InputMaybe<Array<InputMaybe<UpdatesPageFeaturedCategoriesMutation>>>;
};

export type PostPartsFragment = { __typename: 'Post', title: string, metaDescription?: string | null, metaKeywords?: Array<string | null> | null, excerpt: string, date: string, author: string, authorTitle: string, readTime: string, category: string, tags: Array<string>, featured: boolean, image: string, body?: any | null, schemaMarkup?: { __typename: 'PostSchemaMarkup', type: string, headline?: string | null, datePublished?: string | null, dateModified?: string | null, authorName?: string | null, publisherName?: string | null, publisherLogo?: string | null, description?: string | null } | null };

export type HomePagePartsFragment = { __typename: 'HomePage', title: string, metaDescription?: string | null, metaKeywords?: Array<string | null> | null, heroHeading: string, heroSubheading: string, heroImage: string, schemaMarkup?: { __typename: 'HomePageSchemaMarkup', type: string, name?: string | null, description?: string | null, url?: string | null, image?: string | null } | null, stats?: Array<{ __typename: 'HomePageStats', value: string, label: string } | null> | null, features?: Array<{ __typename: 'HomePageFeatures', title: string, description: string, icon?: string | null } | null> | null, valueCards?: Array<{ __typename: 'HomePageValueCards', title: string, description: string, icon?: string | null } | null> | null, testimonial?: { __typename: 'HomePageTestimonial', quote: string, author: string, role: string, company: string } | null, industries?: Array<{ __typename: 'HomePageIndustries', name: string } | null> | null, teamMembers?: Array<{ __typename: 'HomePageTeamMembers', name: string, title: string, bio: string, image: string } | null> | null };

export type PagePartsFragment = { __typename: 'Page', title: string, metaDescription?: string | null, metaKeywords?: Array<string | null> | null, description: string, body?: any | null, schemaMarkup?: { __typename: 'PageSchemaMarkup', type: string, name?: string | null, description?: string | null, url?: string | null, image?: string | null } | null };

export type ApproachPagePartsFragment = { __typename: 'ApproachPage', title: string, metaDescription?: string | null, metaKeywords?: Array<string | null> | null, heroHeading: string, heroSubheading: string, image?: string | null, schemaMarkup?: { __typename: 'ApproachPageSchemaMarkup', type: string, name?: string | null, description?: string | null, url?: string | null, image?: string | null } | null, approachSteps?: Array<{ __typename: 'ApproachPageApproachSteps', title: string, description: string, stepNumber: number } | null> | null, principles?: Array<{ __typename: 'ApproachPagePrinciples', title: string, description: string, icon?: string | null } | null> | null };

export type ResultsPagePartsFragment = { __typename: 'ResultsPage', title: string, metaDescription?: string | null, metaKeywords?: Array<string | null> | null, heroHeading: string, heroSubheading: string, schemaMarkup?: { __typename: 'ResultsPageSchemaMarkup', type: string, name?: string | null, description?: string | null, url?: string | null, image?: string | null } | null, metrics?: Array<{ __typename: 'ResultsPageMetrics', value: string, label: string, icon?: string | null } | null> | null, caseStudies?: Array<{ __typename: 'ResultsPageCaseStudies', title: string, challenge: string, approach: string, outcome: string, client: string, clientRole: string, company: string } | null> | null, achievements?: Array<{ __typename: 'ResultsPageAchievements', text: string } | null> | null, testimonial?: { __typename: 'ResultsPageTestimonial', quote: string, author: string, role: string, company: string } | null };

export type ServicesPagePartsFragment = { __typename: 'ServicesPage', title: string, metaDescription?: string | null, metaKeywords?: Array<string | null> | null, heroHeading: string, heroSubheading: string, schemaMarkup?: { __typename: 'ServicesPageSchemaMarkup', type: string, name?: string | null, description?: string | null, url?: string | null, image?: string | null } | null, services?: Array<{ __typename: 'ServicesPageServices', title: string, description: string, icon?: string | null } | null> | null };

export type TeamPagePartsFragment = { __typename: 'TeamPage', title: string, metaDescription?: string | null, metaKeywords?: Array<string | null> | null, heroHeading: string, heroSubheading: string, schemaMarkup?: { __typename: 'TeamPageSchemaMarkup', type: string, name?: string | null, description?: string | null, url?: string | null, image?: string | null } | null, teamMembers?: Array<{ __typename: 'TeamPageTeamMembers', name: string, title: string, bio: string, image: string, email?: string | null, phone?: string | null, linkedin?: string | null } | null> | null };

export type ContactPagePartsFragment = { __typename: 'ContactPage', title: string, metaDescription?: string | null, metaKeywords?: Array<string | null> | null, heroHeading: string, heroSubheading: string, schemaMarkup?: { __typename: 'ContactPageSchemaMarkup', type: string, name?: string | null, description?: string | null, url?: string | null, image?: string | null } | null, offices?: Array<{ __typename: 'ContactPageOffices', city: string, address: string, phone?: string | null, email?: string | null } | null> | null, contactForm?: { __typename: 'ContactPageContactForm', heading: string, subheading?: string | null, successMessage?: string | null } | null };

export type UpdatesPagePartsFragment = { __typename: 'UpdatesPage', title: string, metaDescription?: string | null, metaKeywords?: Array<string | null> | null, heroHeading: string, heroSubheading: string, schemaMarkup?: { __typename: 'UpdatesPageSchemaMarkup', type: string, name?: string | null, description?: string | null, url?: string | null, image?: string | null } | null, featuredCategories?: Array<{ __typename: 'UpdatesPageFeaturedCategories', name: string, description?: string | null } | null> | null };

export type PostQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type PostQuery = { __typename?: 'Query', post: { __typename: 'Post', id: string, title: string, metaDescription?: string | null, metaKeywords?: Array<string | null> | null, excerpt: string, date: string, author: string, authorTitle: string, readTime: string, category: string, tags: Array<string>, featured: boolean, image: string, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, schemaMarkup?: { __typename: 'PostSchemaMarkup', type: string, headline?: string | null, datePublished?: string | null, dateModified?: string | null, authorName?: string | null, publisherName?: string | null, publisherLogo?: string | null, description?: string | null } | null } };

export type PostConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PostFilter>;
}>;


export type PostConnectionQuery = { __typename?: 'Query', postConnection: { __typename?: 'PostConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'PostConnectionEdges', cursor: string, node?: { __typename: 'Post', id: string, title: string, metaDescription?: string | null, metaKeywords?: Array<string | null> | null, excerpt: string, date: string, author: string, authorTitle: string, readTime: string, category: string, tags: Array<string>, featured: boolean, image: string, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, schemaMarkup?: { __typename: 'PostSchemaMarkup', type: string, headline?: string | null, datePublished?: string | null, dateModified?: string | null, authorName?: string | null, publisherName?: string | null, publisherLogo?: string | null, description?: string | null } | null } | null } | null> | null } };

export type HomePageQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type HomePageQuery = { __typename?: 'Query', homePage: { __typename: 'HomePage', id: string, title: string, metaDescription?: string | null, metaKeywords?: Array<string | null> | null, heroHeading: string, heroSubheading: string, heroImage: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, schemaMarkup?: { __typename: 'HomePageSchemaMarkup', type: string, name?: string | null, description?: string | null, url?: string | null, image?: string | null } | null, stats?: Array<{ __typename: 'HomePageStats', value: string, label: string } | null> | null, features?: Array<{ __typename: 'HomePageFeatures', title: string, description: string, icon?: string | null } | null> | null, valueCards?: Array<{ __typename: 'HomePageValueCards', title: string, description: string, icon?: string | null } | null> | null, testimonial?: { __typename: 'HomePageTestimonial', quote: string, author: string, role: string, company: string } | null, industries?: Array<{ __typename: 'HomePageIndustries', name: string } | null> | null, teamMembers?: Array<{ __typename: 'HomePageTeamMembers', name: string, title: string, bio: string, image: string } | null> | null } };

export type HomePageConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<HomePageFilter>;
}>;


export type HomePageConnectionQuery = { __typename?: 'Query', homePageConnection: { __typename?: 'HomePageConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'HomePageConnectionEdges', cursor: string, node?: { __typename: 'HomePage', id: string, title: string, metaDescription?: string | null, metaKeywords?: Array<string | null> | null, heroHeading: string, heroSubheading: string, heroImage: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, schemaMarkup?: { __typename: 'HomePageSchemaMarkup', type: string, name?: string | null, description?: string | null, url?: string | null, image?: string | null } | null, stats?: Array<{ __typename: 'HomePageStats', value: string, label: string } | null> | null, features?: Array<{ __typename: 'HomePageFeatures', title: string, description: string, icon?: string | null } | null> | null, valueCards?: Array<{ __typename: 'HomePageValueCards', title: string, description: string, icon?: string | null } | null> | null, testimonial?: { __typename: 'HomePageTestimonial', quote: string, author: string, role: string, company: string } | null, industries?: Array<{ __typename: 'HomePageIndustries', name: string } | null> | null, teamMembers?: Array<{ __typename: 'HomePageTeamMembers', name: string, title: string, bio: string, image: string } | null> | null } | null } | null> | null } };

export type PageQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type PageQuery = { __typename?: 'Query', page: { __typename: 'Page', id: string, title: string, metaDescription?: string | null, metaKeywords?: Array<string | null> | null, description: string, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, schemaMarkup?: { __typename: 'PageSchemaMarkup', type: string, name?: string | null, description?: string | null, url?: string | null, image?: string | null } | null } };

export type PageConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PageFilter>;
}>;


export type PageConnectionQuery = { __typename?: 'Query', pageConnection: { __typename?: 'PageConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'PageConnectionEdges', cursor: string, node?: { __typename: 'Page', id: string, title: string, metaDescription?: string | null, metaKeywords?: Array<string | null> | null, description: string, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, schemaMarkup?: { __typename: 'PageSchemaMarkup', type: string, name?: string | null, description?: string | null, url?: string | null, image?: string | null } | null } | null } | null> | null } };

export type ApproachPageQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type ApproachPageQuery = { __typename?: 'Query', approachPage: { __typename: 'ApproachPage', id: string, title: string, metaDescription?: string | null, metaKeywords?: Array<string | null> | null, heroHeading: string, heroSubheading: string, image?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, schemaMarkup?: { __typename: 'ApproachPageSchemaMarkup', type: string, name?: string | null, description?: string | null, url?: string | null, image?: string | null } | null, approachSteps?: Array<{ __typename: 'ApproachPageApproachSteps', title: string, description: string, stepNumber: number } | null> | null, principles?: Array<{ __typename: 'ApproachPagePrinciples', title: string, description: string, icon?: string | null } | null> | null } };

export type ApproachPageConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ApproachPageFilter>;
}>;


export type ApproachPageConnectionQuery = { __typename?: 'Query', approachPageConnection: { __typename?: 'ApproachPageConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'ApproachPageConnectionEdges', cursor: string, node?: { __typename: 'ApproachPage', id: string, title: string, metaDescription?: string | null, metaKeywords?: Array<string | null> | null, heroHeading: string, heroSubheading: string, image?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, schemaMarkup?: { __typename: 'ApproachPageSchemaMarkup', type: string, name?: string | null, description?: string | null, url?: string | null, image?: string | null } | null, approachSteps?: Array<{ __typename: 'ApproachPageApproachSteps', title: string, description: string, stepNumber: number } | null> | null, principles?: Array<{ __typename: 'ApproachPagePrinciples', title: string, description: string, icon?: string | null } | null> | null } | null } | null> | null } };

export type ResultsPageQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type ResultsPageQuery = { __typename?: 'Query', resultsPage: { __typename: 'ResultsPage', id: string, title: string, metaDescription?: string | null, metaKeywords?: Array<string | null> | null, heroHeading: string, heroSubheading: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, schemaMarkup?: { __typename: 'ResultsPageSchemaMarkup', type: string, name?: string | null, description?: string | null, url?: string | null, image?: string | null } | null, metrics?: Array<{ __typename: 'ResultsPageMetrics', value: string, label: string, icon?: string | null } | null> | null, caseStudies?: Array<{ __typename: 'ResultsPageCaseStudies', title: string, challenge: string, approach: string, outcome: string, client: string, clientRole: string, company: string } | null> | null, achievements?: Array<{ __typename: 'ResultsPageAchievements', text: string } | null> | null, testimonial?: { __typename: 'ResultsPageTestimonial', quote: string, author: string, role: string, company: string } | null } };

export type ResultsPageConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ResultsPageFilter>;
}>;


export type ResultsPageConnectionQuery = { __typename?: 'Query', resultsPageConnection: { __typename?: 'ResultsPageConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'ResultsPageConnectionEdges', cursor: string, node?: { __typename: 'ResultsPage', id: string, title: string, metaDescription?: string | null, metaKeywords?: Array<string | null> | null, heroHeading: string, heroSubheading: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, schemaMarkup?: { __typename: 'ResultsPageSchemaMarkup', type: string, name?: string | null, description?: string | null, url?: string | null, image?: string | null } | null, metrics?: Array<{ __typename: 'ResultsPageMetrics', value: string, label: string, icon?: string | null } | null> | null, caseStudies?: Array<{ __typename: 'ResultsPageCaseStudies', title: string, challenge: string, approach: string, outcome: string, client: string, clientRole: string, company: string } | null> | null, achievements?: Array<{ __typename: 'ResultsPageAchievements', text: string } | null> | null, testimonial?: { __typename: 'ResultsPageTestimonial', quote: string, author: string, role: string, company: string } | null } | null } | null> | null } };

export type ServicesPageQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type ServicesPageQuery = { __typename?: 'Query', servicesPage: { __typename: 'ServicesPage', id: string, title: string, metaDescription?: string | null, metaKeywords?: Array<string | null> | null, heroHeading: string, heroSubheading: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, schemaMarkup?: { __typename: 'ServicesPageSchemaMarkup', type: string, name?: string | null, description?: string | null, url?: string | null, image?: string | null } | null, services?: Array<{ __typename: 'ServicesPageServices', title: string, description: string, icon?: string | null } | null> | null } };

export type ServicesPageConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ServicesPageFilter>;
}>;


export type ServicesPageConnectionQuery = { __typename?: 'Query', servicesPageConnection: { __typename?: 'ServicesPageConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'ServicesPageConnectionEdges', cursor: string, node?: { __typename: 'ServicesPage', id: string, title: string, metaDescription?: string | null, metaKeywords?: Array<string | null> | null, heroHeading: string, heroSubheading: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, schemaMarkup?: { __typename: 'ServicesPageSchemaMarkup', type: string, name?: string | null, description?: string | null, url?: string | null, image?: string | null } | null, services?: Array<{ __typename: 'ServicesPageServices', title: string, description: string, icon?: string | null } | null> | null } | null } | null> | null } };

export type TeamPageQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type TeamPageQuery = { __typename?: 'Query', teamPage: { __typename: 'TeamPage', id: string, title: string, metaDescription?: string | null, metaKeywords?: Array<string | null> | null, heroHeading: string, heroSubheading: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, schemaMarkup?: { __typename: 'TeamPageSchemaMarkup', type: string, name?: string | null, description?: string | null, url?: string | null, image?: string | null } | null, teamMembers?: Array<{ __typename: 'TeamPageTeamMembers', name: string, title: string, bio: string, image: string, email?: string | null, phone?: string | null, linkedin?: string | null } | null> | null } };

export type TeamPageConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<TeamPageFilter>;
}>;


export type TeamPageConnectionQuery = { __typename?: 'Query', teamPageConnection: { __typename?: 'TeamPageConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'TeamPageConnectionEdges', cursor: string, node?: { __typename: 'TeamPage', id: string, title: string, metaDescription?: string | null, metaKeywords?: Array<string | null> | null, heroHeading: string, heroSubheading: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, schemaMarkup?: { __typename: 'TeamPageSchemaMarkup', type: string, name?: string | null, description?: string | null, url?: string | null, image?: string | null } | null, teamMembers?: Array<{ __typename: 'TeamPageTeamMembers', name: string, title: string, bio: string, image: string, email?: string | null, phone?: string | null, linkedin?: string | null } | null> | null } | null } | null> | null } };

export type ContactPageQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type ContactPageQuery = { __typename?: 'Query', contactPage: { __typename: 'ContactPage', id: string, title: string, metaDescription?: string | null, metaKeywords?: Array<string | null> | null, heroHeading: string, heroSubheading: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, schemaMarkup?: { __typename: 'ContactPageSchemaMarkup', type: string, name?: string | null, description?: string | null, url?: string | null, image?: string | null } | null, offices?: Array<{ __typename: 'ContactPageOffices', city: string, address: string, phone?: string | null, email?: string | null } | null> | null, contactForm?: { __typename: 'ContactPageContactForm', heading: string, subheading?: string | null, successMessage?: string | null } | null } };

export type ContactPageConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ContactPageFilter>;
}>;


export type ContactPageConnectionQuery = { __typename?: 'Query', contactPageConnection: { __typename?: 'ContactPageConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'ContactPageConnectionEdges', cursor: string, node?: { __typename: 'ContactPage', id: string, title: string, metaDescription?: string | null, metaKeywords?: Array<string | null> | null, heroHeading: string, heroSubheading: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, schemaMarkup?: { __typename: 'ContactPageSchemaMarkup', type: string, name?: string | null, description?: string | null, url?: string | null, image?: string | null } | null, offices?: Array<{ __typename: 'ContactPageOffices', city: string, address: string, phone?: string | null, email?: string | null } | null> | null, contactForm?: { __typename: 'ContactPageContactForm', heading: string, subheading?: string | null, successMessage?: string | null } | null } | null } | null> | null } };

export type UpdatesPageQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type UpdatesPageQuery = { __typename?: 'Query', updatesPage: { __typename: 'UpdatesPage', id: string, title: string, metaDescription?: string | null, metaKeywords?: Array<string | null> | null, heroHeading: string, heroSubheading: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, schemaMarkup?: { __typename: 'UpdatesPageSchemaMarkup', type: string, name?: string | null, description?: string | null, url?: string | null, image?: string | null } | null, featuredCategories?: Array<{ __typename: 'UpdatesPageFeaturedCategories', name: string, description?: string | null } | null> | null } };

export type UpdatesPageConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<UpdatesPageFilter>;
}>;


export type UpdatesPageConnectionQuery = { __typename?: 'Query', updatesPageConnection: { __typename?: 'UpdatesPageConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'UpdatesPageConnectionEdges', cursor: string, node?: { __typename: 'UpdatesPage', id: string, title: string, metaDescription?: string | null, metaKeywords?: Array<string | null> | null, heroHeading: string, heroSubheading: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, schemaMarkup?: { __typename: 'UpdatesPageSchemaMarkup', type: string, name?: string | null, description?: string | null, url?: string | null, image?: string | null } | null, featuredCategories?: Array<{ __typename: 'UpdatesPageFeaturedCategories', name: string, description?: string | null } | null> | null } | null } | null> | null } };

export const PostPartsFragmentDoc = gql`
    fragment PostParts on Post {
  __typename
  title
  metaDescription
  metaKeywords
  excerpt
  date
  author
  authorTitle
  readTime
  category
  tags
  featured
  image
  body
  schemaMarkup {
    __typename
    type
    headline
    datePublished
    dateModified
    authorName
    publisherName
    publisherLogo
    description
  }
}
    `;
export const HomePagePartsFragmentDoc = gql`
    fragment HomePageParts on HomePage {
  __typename
  title
  metaDescription
  metaKeywords
  heroHeading
  heroSubheading
  heroImage
  schemaMarkup {
    __typename
    type
    name
    description
    url
    image
  }
  stats {
    __typename
    value
    label
  }
  features {
    __typename
    title
    description
    icon
  }
  valueCards {
    __typename
    title
    description
    icon
  }
  testimonial {
    __typename
    quote
    author
    role
    company
  }
  industries {
    __typename
    name
  }
  teamMembers {
    __typename
    name
    title
    bio
    image
  }
}
    `;
export const PagePartsFragmentDoc = gql`
    fragment PageParts on Page {
  __typename
  title
  metaDescription
  metaKeywords
  description
  body
  schemaMarkup {
    __typename
    type
    name
    description
    url
    image
  }
}
    `;
export const ApproachPagePartsFragmentDoc = gql`
    fragment ApproachPageParts on ApproachPage {
  __typename
  title
  metaDescription
  metaKeywords
  heroHeading
  heroSubheading
  image
  schemaMarkup {
    __typename
    type
    name
    description
    url
    image
  }
  approachSteps {
    __typename
    title
    description
    stepNumber
  }
  principles {
    __typename
    title
    description
    icon
  }
}
    `;
export const ResultsPagePartsFragmentDoc = gql`
    fragment ResultsPageParts on ResultsPage {
  __typename
  title
  metaDescription
  metaKeywords
  heroHeading
  heroSubheading
  schemaMarkup {
    __typename
    type
    name
    description
    url
    image
  }
  metrics {
    __typename
    value
    label
    icon
  }
  caseStudies {
    __typename
    title
    challenge
    approach
    outcome
    client
    clientRole
    company
  }
  achievements {
    __typename
    text
  }
  testimonial {
    __typename
    quote
    author
    role
    company
  }
}
    `;
export const ServicesPagePartsFragmentDoc = gql`
    fragment ServicesPageParts on ServicesPage {
  __typename
  title
  metaDescription
  metaKeywords
  heroHeading
  heroSubheading
  schemaMarkup {
    __typename
    type
    name
    description
    url
    image
  }
  services {
    __typename
    title
    description
    icon
  }
}
    `;
export const TeamPagePartsFragmentDoc = gql`
    fragment TeamPageParts on TeamPage {
  __typename
  title
  metaDescription
  metaKeywords
  heroHeading
  heroSubheading
  schemaMarkup {
    __typename
    type
    name
    description
    url
    image
  }
  teamMembers {
    __typename
    name
    title
    bio
    image
    email
    phone
    linkedin
  }
}
    `;
export const ContactPagePartsFragmentDoc = gql`
    fragment ContactPageParts on ContactPage {
  __typename
  title
  metaDescription
  metaKeywords
  heroHeading
  heroSubheading
  schemaMarkup {
    __typename
    type
    name
    description
    url
    image
  }
  offices {
    __typename
    city
    address
    phone
    email
  }
  contactForm {
    __typename
    heading
    subheading
    successMessage
  }
}
    `;
export const UpdatesPagePartsFragmentDoc = gql`
    fragment UpdatesPageParts on UpdatesPage {
  __typename
  title
  metaDescription
  metaKeywords
  heroHeading
  heroSubheading
  schemaMarkup {
    __typename
    type
    name
    description
    url
    image
  }
  featuredCategories {
    __typename
    name
    description
  }
}
    `;
export const PostDocument = gql`
    query post($relativePath: String!) {
  post(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...PostParts
  }
}
    ${PostPartsFragmentDoc}`;
export const PostConnectionDocument = gql`
    query postConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: PostFilter) {
  postConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...PostParts
      }
    }
  }
}
    ${PostPartsFragmentDoc}`;
export const HomePageDocument = gql`
    query homePage($relativePath: String!) {
  homePage(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...HomePageParts
  }
}
    ${HomePagePartsFragmentDoc}`;
export const HomePageConnectionDocument = gql`
    query homePageConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: HomePageFilter) {
  homePageConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...HomePageParts
      }
    }
  }
}
    ${HomePagePartsFragmentDoc}`;
export const PageDocument = gql`
    query page($relativePath: String!) {
  page(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...PageParts
  }
}
    ${PagePartsFragmentDoc}`;
export const PageConnectionDocument = gql`
    query pageConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: PageFilter) {
  pageConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...PageParts
      }
    }
  }
}
    ${PagePartsFragmentDoc}`;
export const ApproachPageDocument = gql`
    query approachPage($relativePath: String!) {
  approachPage(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...ApproachPageParts
  }
}
    ${ApproachPagePartsFragmentDoc}`;
export const ApproachPageConnectionDocument = gql`
    query approachPageConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: ApproachPageFilter) {
  approachPageConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...ApproachPageParts
      }
    }
  }
}
    ${ApproachPagePartsFragmentDoc}`;
export const ResultsPageDocument = gql`
    query resultsPage($relativePath: String!) {
  resultsPage(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...ResultsPageParts
  }
}
    ${ResultsPagePartsFragmentDoc}`;
export const ResultsPageConnectionDocument = gql`
    query resultsPageConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: ResultsPageFilter) {
  resultsPageConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...ResultsPageParts
      }
    }
  }
}
    ${ResultsPagePartsFragmentDoc}`;
export const ServicesPageDocument = gql`
    query servicesPage($relativePath: String!) {
  servicesPage(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...ServicesPageParts
  }
}
    ${ServicesPagePartsFragmentDoc}`;
export const ServicesPageConnectionDocument = gql`
    query servicesPageConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: ServicesPageFilter) {
  servicesPageConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...ServicesPageParts
      }
    }
  }
}
    ${ServicesPagePartsFragmentDoc}`;
export const TeamPageDocument = gql`
    query teamPage($relativePath: String!) {
  teamPage(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...TeamPageParts
  }
}
    ${TeamPagePartsFragmentDoc}`;
export const TeamPageConnectionDocument = gql`
    query teamPageConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: TeamPageFilter) {
  teamPageConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...TeamPageParts
      }
    }
  }
}
    ${TeamPagePartsFragmentDoc}`;
export const ContactPageDocument = gql`
    query contactPage($relativePath: String!) {
  contactPage(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...ContactPageParts
  }
}
    ${ContactPagePartsFragmentDoc}`;
export const ContactPageConnectionDocument = gql`
    query contactPageConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: ContactPageFilter) {
  contactPageConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...ContactPageParts
      }
    }
  }
}
    ${ContactPagePartsFragmentDoc}`;
export const UpdatesPageDocument = gql`
    query updatesPage($relativePath: String!) {
  updatesPage(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...UpdatesPageParts
  }
}
    ${UpdatesPagePartsFragmentDoc}`;
export const UpdatesPageConnectionDocument = gql`
    query updatesPageConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: UpdatesPageFilter) {
  updatesPageConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...UpdatesPageParts
      }
    }
  }
}
    ${UpdatesPagePartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      post(variables: PostQueryVariables, options?: C): Promise<{data: PostQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PostQueryVariables, query: string}> {
        return requester<{data: PostQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PostQueryVariables, query: string}, PostQueryVariables>(PostDocument, variables, options);
      },
    postConnection(variables?: PostConnectionQueryVariables, options?: C): Promise<{data: PostConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PostConnectionQueryVariables, query: string}> {
        return requester<{data: PostConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PostConnectionQueryVariables, query: string}, PostConnectionQueryVariables>(PostConnectionDocument, variables, options);
      },
    homePage(variables: HomePageQueryVariables, options?: C): Promise<{data: HomePageQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: HomePageQueryVariables, query: string}> {
        return requester<{data: HomePageQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: HomePageQueryVariables, query: string}, HomePageQueryVariables>(HomePageDocument, variables, options);
      },
    homePageConnection(variables?: HomePageConnectionQueryVariables, options?: C): Promise<{data: HomePageConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: HomePageConnectionQueryVariables, query: string}> {
        return requester<{data: HomePageConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: HomePageConnectionQueryVariables, query: string}, HomePageConnectionQueryVariables>(HomePageConnectionDocument, variables, options);
      },
    page(variables: PageQueryVariables, options?: C): Promise<{data: PageQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PageQueryVariables, query: string}> {
        return requester<{data: PageQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PageQueryVariables, query: string}, PageQueryVariables>(PageDocument, variables, options);
      },
    pageConnection(variables?: PageConnectionQueryVariables, options?: C): Promise<{data: PageConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PageConnectionQueryVariables, query: string}> {
        return requester<{data: PageConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PageConnectionQueryVariables, query: string}, PageConnectionQueryVariables>(PageConnectionDocument, variables, options);
      },
    approachPage(variables: ApproachPageQueryVariables, options?: C): Promise<{data: ApproachPageQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ApproachPageQueryVariables, query: string}> {
        return requester<{data: ApproachPageQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ApproachPageQueryVariables, query: string}, ApproachPageQueryVariables>(ApproachPageDocument, variables, options);
      },
    approachPageConnection(variables?: ApproachPageConnectionQueryVariables, options?: C): Promise<{data: ApproachPageConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ApproachPageConnectionQueryVariables, query: string}> {
        return requester<{data: ApproachPageConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ApproachPageConnectionQueryVariables, query: string}, ApproachPageConnectionQueryVariables>(ApproachPageConnectionDocument, variables, options);
      },
    resultsPage(variables: ResultsPageQueryVariables, options?: C): Promise<{data: ResultsPageQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ResultsPageQueryVariables, query: string}> {
        return requester<{data: ResultsPageQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ResultsPageQueryVariables, query: string}, ResultsPageQueryVariables>(ResultsPageDocument, variables, options);
      },
    resultsPageConnection(variables?: ResultsPageConnectionQueryVariables, options?: C): Promise<{data: ResultsPageConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ResultsPageConnectionQueryVariables, query: string}> {
        return requester<{data: ResultsPageConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ResultsPageConnectionQueryVariables, query: string}, ResultsPageConnectionQueryVariables>(ResultsPageConnectionDocument, variables, options);
      },
    servicesPage(variables: ServicesPageQueryVariables, options?: C): Promise<{data: ServicesPageQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ServicesPageQueryVariables, query: string}> {
        return requester<{data: ServicesPageQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ServicesPageQueryVariables, query: string}, ServicesPageQueryVariables>(ServicesPageDocument, variables, options);
      },
    servicesPageConnection(variables?: ServicesPageConnectionQueryVariables, options?: C): Promise<{data: ServicesPageConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ServicesPageConnectionQueryVariables, query: string}> {
        return requester<{data: ServicesPageConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ServicesPageConnectionQueryVariables, query: string}, ServicesPageConnectionQueryVariables>(ServicesPageConnectionDocument, variables, options);
      },
    teamPage(variables: TeamPageQueryVariables, options?: C): Promise<{data: TeamPageQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: TeamPageQueryVariables, query: string}> {
        return requester<{data: TeamPageQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: TeamPageQueryVariables, query: string}, TeamPageQueryVariables>(TeamPageDocument, variables, options);
      },
    teamPageConnection(variables?: TeamPageConnectionQueryVariables, options?: C): Promise<{data: TeamPageConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: TeamPageConnectionQueryVariables, query: string}> {
        return requester<{data: TeamPageConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: TeamPageConnectionQueryVariables, query: string}, TeamPageConnectionQueryVariables>(TeamPageConnectionDocument, variables, options);
      },
    contactPage(variables: ContactPageQueryVariables, options?: C): Promise<{data: ContactPageQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ContactPageQueryVariables, query: string}> {
        return requester<{data: ContactPageQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ContactPageQueryVariables, query: string}, ContactPageQueryVariables>(ContactPageDocument, variables, options);
      },
    contactPageConnection(variables?: ContactPageConnectionQueryVariables, options?: C): Promise<{data: ContactPageConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ContactPageConnectionQueryVariables, query: string}> {
        return requester<{data: ContactPageConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ContactPageConnectionQueryVariables, query: string}, ContactPageConnectionQueryVariables>(ContactPageConnectionDocument, variables, options);
      },
    updatesPage(variables: UpdatesPageQueryVariables, options?: C): Promise<{data: UpdatesPageQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: UpdatesPageQueryVariables, query: string}> {
        return requester<{data: UpdatesPageQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: UpdatesPageQueryVariables, query: string}, UpdatesPageQueryVariables>(UpdatesPageDocument, variables, options);
      },
    updatesPageConnection(variables?: UpdatesPageConnectionQueryVariables, options?: C): Promise<{data: UpdatesPageConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: UpdatesPageConnectionQueryVariables, query: string}> {
        return requester<{data: UpdatesPageConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: UpdatesPageConnectionQueryVariables, query: string}, UpdatesPageConnectionQueryVariables>(UpdatesPageConnectionDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { createClient, TinaClient } from "tinacms/dist/client";

const generateRequester = (
  client: TinaClient,
) => {
  const requester: (
    doc: any,
    vars?: any,
    options?: {
      branch?: string,
      /**
       * Aside from `method` and `body`, all fetch options are passed
       * through to underlying fetch request
       */
      fetchOptions?: Omit<Parameters<typeof fetch>[1], 'body' | 'method'>,
    },
    client
  ) => Promise<any> = async (doc, vars, options) => {
    let url = client.apiUrl
    if (options?.branch) {
      const index = client.apiUrl.lastIndexOf('/')
      url = client.apiUrl.substring(0, index + 1) + options.branch
    }
    const data = await client.request({
      query: doc,
      variables: vars,
      url,
    }, options)

    return { data: data?.data, errors: data?.errors, query: doc, variables: vars || {} }
  }

  return requester
}

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(
      createClient({
        url: "https://content.tinajs.io/1.5/content/3db951f1-1013-495b-976f-b111359664bc/github/main",
        queries,
      })
    )
  )

export const queries = (
  client: TinaClient,
) => {
  const requester = generateRequester(client)
  return getSdk(requester)
}

  